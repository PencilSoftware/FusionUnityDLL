name: Build Fusion Unity Library for Headset

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    name: Build Windows x64
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: |
        cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

    - name: Prepare artifacts
      run: |
        mkdir artifacts
        copy build\${{ env.BUILD_TYPE }}\FusionUnity.dll artifacts\
        if (Test-Path "build\${{ env.BUILD_TYPE }}\FusionUnity.pdb") { copy build\${{ env.BUILD_TYPE }}\FusionUnity.pdb artifacts\ }

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FusionUnity-Windows-x64
        path: artifacts/
        retention-days: 30

  build-android:
    name: Build Android ARM64
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Android NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25c

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Configure CMake for Android
      run: |
        mkdir build
        cd build
        cmake .. -G "Ninja" \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      run: |
        cmake --build build --parallel

    - name: Prepare artifacts
      run: |
        mkdir artifacts
        cp build/libFusionUnity.so artifacts/

    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FusionUnity-Android-ARM64
        path: artifacts/
        retention-days: 30

  package-unity:
    name: Create Unity Package
    needs: [build-windows, build-android]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: FusionUnity-Windows-x64
        path: artifacts/windows/

    - name: Download Android artifacts
      uses: actions/download-artifact@v4
      with:
        name: FusionUnity-Android-ARM64
        path: artifacts/android/

    - name: Create Unity package
      run: |
        mkdir -p unity-package/Assets/Plugins/FusionUnity/Windows/x86_64
        mkdir -p unity-package/Assets/Plugins/FusionUnity/Android/libs/arm64-v8a
        mkdir -p unity-package/Assets/Scripts/FusionUnity
        
        # 复制Windows DLL
        cp artifacts/windows/FusionUnity.dll unity-package/Assets/Plugins/FusionUnity/Windows/x86_64/
        
        # 复制Android库
        cp artifacts/android/libFusionUnity.so unity-package/Assets/Plugins/FusionUnity/Android/libs/arm64-v8a/
        
        # 复制Unity脚本
        if [ -d "unity/Scripts" ]; then
          cp unity/Scripts/*.cs unity-package/Assets/Scripts/FusionUnity/
        fi
        
        # 创建README
        cat > unity-package/README.md << 'EOF'
        # Fusion Unity Package for Headset Tracking
        
        专为头显IMU传感器融合设计的Unity库，支持Windows开发和Android部署。
        
        ## 平台支持
        - ✅ Windows x64 (Unity编辑器)
        - ✅ Android ARM64 (头显设备)
        
        ## 核心功能
        **去除重力的加速度数据** - 这是您头显位置估计的关键！
        
        ```csharp
        public class HeadsetController : MonoBehaviour {
            public FusionIMU fusionIMU;

            void Update() {
                Vector3 gyro = GetIMUGyroscope();    // rad/s
                Vector3 accel = GetIMUAccelerometer(); // m/s²
                fusionIMU.UpdateIMU(gyro, accel, Time.deltaTime);

                // 获取去除重力的加速度 - 用于位置估计
                Vector3 linearAccel = fusionIMU.linearAcceleration;  // 传感器坐标系
                Vector3 earthAccel = fusionIMU.earthAcceleration;    // 世界坐标系 (推荐)
                
                // 结合Camera的位置数据进行融合
                UpdateHeadsetPosition(earthAccel);
            }
        }
        ```
        
        ## 安装方法
        1. 将整个Assets文件夹复制到您的Unity项目
        2. 为GameObject添加FusionIMU组件
        3. 连接您的IMU数据源
        4. 部署到Android头显设备
        
        ## 重要说明
        - `linearAcceleration`: 传感器坐标系下去除重力的加速度
        - `earthAcceleration`: 世界坐标系下去除重力的加速度 ⭐ **推荐用于位置估计**
        - 配合您的Camera solvePNP数据使用，实现完整的6DOF头显追踪
        EOF

    - name: Package for Unity
      run: |
        cd unity-package
        zip -r ../FusionUnity-Headset-Package.zip .

    - name: Upload Unity package
      uses: actions/upload-artifact@v4
      with:
        name: FusionUnity-Headset-Package
        path: FusionUnity-Headset-Package.zip
        retention-days: 90

    - name: Create release summary
      run: |
        echo "## 🎯 头显追踪专用Fusion库编译完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 包含内容:" >> $GITHUB_STEP_SUMMARY
        echo "- Windows x64 DLL (Unity编辑器)" >> $GITHUB_STEP_SUMMARY
        echo "- Android ARM64 库 (头显设备)" >> $GITHUB_STEP_SUMMARY
        echo "- Unity C# 脚本和示例" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 核心功能:" >> $GITHUB_STEP_SUMMARY
        echo "- **自动重力补偿** - 输出去除重力的线性加速度" >> $GITHUB_STEP_SUMMARY
        echo "- **高精度姿态估计** - 基于Madgwick算法的传感器融合" >> $GITHUB_STEP_SUMMARY
        echo "- **头显优化** - 专为头显IMU特性调优" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 下载:" >> $GITHUB_STEP_SUMMARY
        echo "在Artifacts中下载 \`FusionUnity-Headset-Package.zip\`" >> $GITHUB_STEP_SUMMARY 